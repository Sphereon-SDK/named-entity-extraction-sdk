//
// NamedEntityExtractionAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class NamedEntityExtractionAPI {
    /**
     Upload text
     
     - parameter jobid: (path) jobid 
     - parameter textInput: (body) textInput 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addInputText(jobid: String, textInput: TextInput, completion: @escaping ((_ data: Job?,_ error: Error?) -> Void)) {
        addInputTextWithRequestBuilder(jobid: jobid, textInput: textInput).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Upload text
     - POST /extraction/name/entity/jobs/{jobid}/streams/text
     - Upload text for name entity extraction. Name entity extraction will start after submitting the job.
     - OAuth:
       - type: oauth2
       - name: oauth2schema
     - examples: [{contentType=application/json;charset=UTF-8, example={
  "completionTime" : "2000-01-23T04:56:07.000+00:00",
  "jobId" : "aeiou",
  "creationTime" : "2000-01-23T04:56:07.000+00:00",
  "inputs" : [ {
    "textInput" : {
      "text" : "aeiou"
    },
    "id" : "aeiou"
  } ],
  "jobSettings" : {
    "engine" : "BASIC"
  },
  "updateTime" : "2000-01-23T04:56:07.000+00:00",
  "state" : "INPUTS_UPLOADED",
  "queueTime" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter jobid: (path) jobid 
     - parameter textInput: (body) textInput 

     - returns: RequestBuilder<Job> 
     */
    open class func addInputTextWithRequestBuilder(jobid: String, textInput: TextInput) -> RequestBuilder<Job> {
        var path = "/extraction/name/entity/jobs/{jobid}/streams/text"
        path = path.replacingOccurrences(of: "{jobid}", with: "\(jobid)", options: .literal, range: nil)
        let URLString = NamedEntityExtractionAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: textInput)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Job>.Type = NamedEntityExtractionAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a name entity extraction job
     
     - parameter jobSettings: (body) jobSettings 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createJob(jobSettings: JobSettings, completion: @escaping ((_ data: Job?,_ error: Error?) -> Void)) {
        createJobWithRequestBuilder(jobSettings: jobSettings).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create a name entity extraction job
     - POST /extraction/name/entity/jobs
     - Create a name entity extraction job with settings. For optional settings defaults will be used
     - OAuth:
       - type: oauth2
       - name: oauth2schema
     - examples: [{contentType=application/json;charset=UTF-8, example={
  "completionTime" : "2000-01-23T04:56:07.000+00:00",
  "jobId" : "aeiou",
  "creationTime" : "2000-01-23T04:56:07.000+00:00",
  "inputs" : [ {
    "textInput" : {
      "text" : "aeiou"
    },
    "id" : "aeiou"
  } ],
  "jobSettings" : {
    "engine" : "BASIC"
  },
  "updateTime" : "2000-01-23T04:56:07.000+00:00",
  "state" : "INPUTS_UPLOADED",
  "queueTime" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter jobSettings: (body) jobSettings 

     - returns: RequestBuilder<Job> 
     */
    open class func createJobWithRequestBuilder(jobSettings: JobSettings) -> RequestBuilder<Job> {
        let path = "/extraction/name/entity/jobs"
        let URLString = NamedEntityExtractionAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: jobSettings)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Job>.Type = NamedEntityExtractionAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a job manually
     
     - parameter jobid: (path) jobid 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteJob(jobid: String, completion: @escaping ((_ data: Job?,_ error: Error?) -> Void)) {
        deleteJobWithRequestBuilder(jobid: jobid).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Delete a job manually
     - DELETE /extraction/name/entity/jobs/{jobid}
     - Delete the job and all related files.
     - OAuth:
       - type: oauth2
       - name: oauth2schema
     - examples: [{contentType=application/json;charset=UTF-8, example={
  "completionTime" : "2000-01-23T04:56:07.000+00:00",
  "jobId" : "aeiou",
  "creationTime" : "2000-01-23T04:56:07.000+00:00",
  "inputs" : [ {
    "textInput" : {
      "text" : "aeiou"
    },
    "id" : "aeiou"
  } ],
  "jobSettings" : {
    "engine" : "BASIC"
  },
  "updateTime" : "2000-01-23T04:56:07.000+00:00",
  "state" : "INPUTS_UPLOADED",
  "queueTime" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter jobid: (path) jobid 

     - returns: RequestBuilder<Job> 
     */
    open class func deleteJobWithRequestBuilder(jobid: String) -> RequestBuilder<Job> {
        var path = "/extraction/name/entity/jobs/{jobid}"
        path = path.replacingOccurrences(of: "{jobid}", with: "\(jobid)", options: .literal, range: nil)
        let URLString = NamedEntityExtractionAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Job>.Type = NamedEntityExtractionAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Job definition and state
     
     - parameter jobid: (path) jobid 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getJob(jobid: String, completion: @escaping ((_ data: Job?,_ error: Error?) -> Void)) {
        getJobWithRequestBuilder(jobid: jobid).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Job definition and state
     - GET /extraction/name/entity/jobs/{jobid}
     - Get the name entity extraction job definition and current state. Please note that you can differentiate based on http response status.
     - OAuth:
       - type: oauth2
       - name: oauth2schema
     - examples: [{contentType=application/json;charset=UTF-8, example={
  "completionTime" : "2000-01-23T04:56:07.000+00:00",
  "jobId" : "aeiou",
  "creationTime" : "2000-01-23T04:56:07.000+00:00",
  "inputs" : [ {
    "textInput" : {
      "text" : "aeiou"
    },
    "id" : "aeiou"
  } ],
  "jobSettings" : {
    "engine" : "BASIC"
  },
  "updateTime" : "2000-01-23T04:56:07.000+00:00",
  "state" : "INPUTS_UPLOADED",
  "queueTime" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter jobid: (path) jobid 

     - returns: RequestBuilder<Job> 
     */
    open class func getJobWithRequestBuilder(jobid: String) -> RequestBuilder<Job> {
        var path = "/extraction/name/entity/jobs/{jobid}"
        path = path.replacingOccurrences(of: "{jobid}", with: "\(jobid)", options: .literal, range: nil)
        let URLString = NamedEntityExtractionAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Job>.Type = NamedEntityExtractionAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the extraction results
     
     - parameter jobid: (path) jobid 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getResult(jobid: String, completion: @escaping ((_ data: NamedEntityExtractionResponse?,_ error: Error?) -> Void)) {
        getResultWithRequestBuilder(jobid: jobid).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get the extraction results
     - GET /extraction/name/entity/jobs/{jobid}/result
     - Get the name entities that are extracted from the text. The name entity extraction response contains a list of name entities for each text. For each name entity the weight is given with other text statistics.
     - OAuth:
       - type: oauth2
       - name: oauth2schema
     - examples: [{contentType=application/json;charset=UTF-8, example={
  "jobId" : "aeiou",
  "namedEntities" : {
    "key" : {
      "namedEntities" : [ {
        "sentence" : "aeiou",
        "prob" : 0.8008281904610115,
        "type" : "aeiou",
        "entity" : "aeiou"
      } ]
    }
  },
  "job" : {
    "completionTime" : "2000-01-23T04:56:07.000+00:00",
    "jobId" : "aeiou",
    "creationTime" : "2000-01-23T04:56:07.000+00:00",
    "inputs" : [ {
      "textInput" : {
        "text" : "aeiou"
      },
      "id" : "aeiou"
    } ],
    "jobSettings" : {
      "engine" : "BASIC"
    },
    "updateTime" : "2000-01-23T04:56:07.000+00:00",
    "state" : "INPUTS_UPLOADED",
    "queueTime" : "2000-01-23T04:56:07.000+00:00"
  },
  "errors" : [ "aeiou" ]
}}]
     
     - parameter jobid: (path) jobid 

     - returns: RequestBuilder<NamedEntityExtractionResponse> 
     */
    open class func getResultWithRequestBuilder(jobid: String) -> RequestBuilder<NamedEntityExtractionResponse> {
        var path = "/extraction/name/entity/jobs/{jobid}/result"
        path = path.replacingOccurrences(of: "{jobid}", with: "\(jobid)", options: .literal, range: nil)
        let URLString = NamedEntityExtractionAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<NamedEntityExtractionResponse>.Type = NamedEntityExtractionAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Submit name entity extraction job for processing
     
     - parameter jobid: (path) jobid 
     - parameter settings: (body) settings 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func submitJob(jobid: String, settings: JobSettings, completion: @escaping ((_ data: Job?,_ error: Error?) -> Void)) {
        submitJobWithRequestBuilder(jobid: jobid, settings: settings).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Submit name entity extraction job for processing
     - PUT /extraction/name/entity/jobs/{jobid}
     - Start name entity extraction. The extraction is done on the previously texts. The settings supplied with the job in the request body are used for the name entity extraction. You can only submit the job after a new Job is created with status INPUTS_UPLOADED or resubmit an existing Job with status ERROR. In all cases the job Id in the path must match the jobId in the request.
     - OAuth:
       - type: oauth2
       - name: oauth2schema
     - examples: [{contentType=application/json;charset=UTF-8, example={
  "completionTime" : "2000-01-23T04:56:07.000+00:00",
  "jobId" : "aeiou",
  "creationTime" : "2000-01-23T04:56:07.000+00:00",
  "inputs" : [ {
    "textInput" : {
      "text" : "aeiou"
    },
    "id" : "aeiou"
  } ],
  "jobSettings" : {
    "engine" : "BASIC"
  },
  "updateTime" : "2000-01-23T04:56:07.000+00:00",
  "state" : "INPUTS_UPLOADED",
  "queueTime" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter jobid: (path) jobid 
     - parameter settings: (body) settings 

     - returns: RequestBuilder<Job> 
     */
    open class func submitJobWithRequestBuilder(jobid: String, settings: JobSettings) -> RequestBuilder<Job> {
        var path = "/extraction/name/entity/jobs/{jobid}"
        path = path.replacingOccurrences(of: "{jobid}", with: "\(jobid)", options: .literal, range: nil)
        let URLString = NamedEntityExtractionAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: settings)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Job>.Type = NamedEntityExtractionAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
