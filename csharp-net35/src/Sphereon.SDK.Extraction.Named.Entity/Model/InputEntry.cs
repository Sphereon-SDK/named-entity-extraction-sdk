/* 
 * Name Entity Extraction
 *
 * The Name Entity Extraction API allows you to extract name entities from text. Name entities can be extracted from text, file or stream location. With each extracted name entity a type of entity and a probability will be given.    The flow is generally as follows:  1. Create an extraction job. If no settings are provided, default settings are used.  2. Upload content for extraction.  3. Start the extraction job.  3. Get the result when the extraction is completed.    Full API Documentation: https://docs.sphereon.com/api/extraction/name/entity/0.1/html  Interactive testing: A web based test console is available in the Sphereon API Store at https://store.sphereon.com
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Sphereon.SDK.Extraction.Named.Entity.Client.SwaggerDateConverter;

namespace Sphereon.SDK.Extraction.Named.Entity.Model
{
    /// <summary>
    /// Input entry
    /// </summary>
    [DataContract]
    public partial class InputEntry :  IEquatable<InputEntry>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InputEntry" /> class.
        /// </summary>
        /// <param name="TextInput">The text input for a job..</param>
        /// <param name="Id">The id of the input for a job..</param>
        public InputEntry(TextInput TextInput = default(TextInput), string Id = default(string))
        {
            this.TextInput = TextInput;
            this.Id = Id;
        }
        
        /// <summary>
        /// The text input for a job.
        /// </summary>
        /// <value>The text input for a job.</value>
        [DataMember(Name="textInput", EmitDefaultValue=false)]
        public TextInput TextInput { get; set; }

        /// <summary>
        /// The id of the input for a job.
        /// </summary>
        /// <value>The id of the input for a job.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputEntry {\n");
            sb.Append("  TextInput: ").Append(TextInput).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InputEntry);
        }

        /// <summary>
        /// Returns true if InputEntry instances are equal
        /// </summary>
        /// <param name="other">Instance of InputEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputEntry other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TextInput == other.TextInput ||
                    this.TextInput != null &&
                    this.TextInput.Equals(other.TextInput)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TextInput != null)
                    hash = hash * 59 + this.TextInput.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                return hash;
            }
        }

    }

}
